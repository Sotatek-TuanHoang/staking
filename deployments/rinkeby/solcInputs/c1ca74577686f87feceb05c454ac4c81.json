{
  "language": "Solidity",
  "sources": {
    "contracts/FakeToken.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract FakeToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20(\"Chain\", \"CHN\") {\n        // _mint(msg.sender, initialSupply);\n    }\n\n    function mintForUser(uint256 amount) public {\n        _mint(msg.sender, amount);\n    }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/mocks/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract ERC20Mock is ERC20 {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 supply\n    ) ERC20(name, symbol) {\n        _mint(msg.sender, supply);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/Staking.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"./SafeMath.sol\";\nimport \"./IErc20Token.sol\";\nimport \"./StakingStorage.sol\";\nimport \"./StakingEvent.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// @title Staking Contract\ncontract Staking is StakingStorage, StakingEvent, Ownable {\n    using SafeMath for uint256;\n\n    constructor(address chn, uint256 _autoCompoundingFee) Ownable() {\n        rewardAddress = chn;\n        autoCompoundingFee = _autoCompoundingFee;\n    }\n\n    /********************\n     * MODIFIER *\n     ********************/\n\n    modifier pidValid(uint256 pid) {\n        require(linearPoolInfo.length > pid && pid >= 0, \"pid not valid\");\n        _;\n    }\n\n    /********************\n     * STANDARD ACTIONS *\n     ********************/\n\n    function getPoolInfoFromId(uint pid) public view pidValid(pid) returns (LinearPoolInfo memory) {\n        return linearPoolInfo[pid];\n    }\n\n    function getStakedAmount(uint256 pid, address staker) public view pidValid(pid) returns (uint256) {\n        uint256 currentIndex = stakedMapIndex[pid][staker];\n        Checkpoint memory current = stakedMap[pid][staker][currentIndex];\n        return current.stakedAmount;\n    }\n\n    function getPriorStakedAmount(uint256 pid, address staker, uint256 blockNumber) external view pidValid(pid) returns (uint256) {\n        if (blockNumber == 0) {\n            return getStakedAmount(pid, staker);\n        }\n\n        uint256 currentIndex = stakedMapIndex[pid][staker];\n        Checkpoint memory current = stakedMap[pid][staker][currentIndex];\n\n        for (uint i = current.blockNumber; i > 0; i--) {\n            Checkpoint memory checkpoint = stakedMap[pid][staker][i];\n            if (checkpoint.blockNumber <= blockNumber) {\n                return checkpoint.stakedAmount;\n            }\n        }\n        return 0;\n    }\n\n\n    function getAmountRewardInPool(uint256 pid, address staker) public view pidValid(pid) returns (uint256) {\n        return _getAmountRewardInPool(pid, staker);\n    }\n\n    function getCoumpoundingReward(uint256 pid) public view pidValid(pid) returns (uint256) {\n        LinearPoolInfo memory currentPool = linearPoolInfo[pid];\n        require(currentPool.tokenStake == rewardAddress, \"Pool not valid\");\n        address[] memory listUser = listUserInPool[pid];\n        uint256 totalReward;\n        for (uint256 index = 0; index < listUser.length; index++) {\n            address staker = listUser[index];\n            uint256 reward = _getAmountRewardInPool(pid, staker);\n            totalReward = totalReward.add(reward.mul(autoCompoundingFee).div(PERCENT));\n        }\n        return totalReward;\n    }\n\n    function calculateReward(uint256 rewardPerBlock, uint256 diffBlock, uint256 stakeAmount) public pure returns (uint256) {\n        return rewardPerBlock.mul(diffBlock).mul(stakeAmount).div(REWARD_SCALE);\n    }\n\n    function _getAmountRewardInPool(uint256 pid, address staker) private view returns (uint256) {\n        LinearPoolInfo memory currentPool = linearPoolInfo[pid];\n        uint256 currentIndex = stakedMapIndex[pid][staker];\n        Checkpoint memory current = stakedMap[pid][staker][currentIndex];\n        uint256 currentBlock = block.number;\n        uint256 diffBlock = currentBlock.sub(current.blockNumber);\n        uint256 reward = calculateReward(currentPool.rewardPerBlock, diffBlock, current.stakedAmount);\n        return totalClaimForLatestStakeBlock[pid][staker].add(reward).sub(claimedByUser[pid][staker]);\n    }\n\n    function getAllAmountReward(address staker) public view returns (uint256) {\n        uint256 totalAmount;\n        for (uint i = 0; i < linearPoolInfo.length; i++) {\n            uint256 pendingRewardInPool = _getAmountRewardInPool(i, staker);\n            totalAmount = totalAmount.add(pendingRewardInPool);\n        }\n        return totalAmount;\n    }\n\n    function getBlockNumber() public view returns (uint256) {\n        return block.number;\n    }\n\n    function _updateTotalClaimForLatestStakeBlock(uint256 pid, uint256 rewardPerBlock, Checkpoint memory checkpoint, uint256 blockNumber, address staker) private {\n        uint256 diffBlock = blockNumber.sub(checkpoint.blockNumber);\n        uint256 claimAmount = calculateReward(rewardPerBlock, diffBlock, checkpoint.stakedAmount);\n        totalClaimForLatestStakeBlock[pid][staker] = totalClaimForLatestStakeBlock[pid][staker].add(claimAmount);\n    }\n\n    function stake(uint256 pid, uint256 amount) public pidValid(pid) {\n        LinearPoolInfo memory currentPool = linearPoolInfo[pid];\n        require(amount >= currentPool.minimumStakeAmount, \"Too small amount\");\n        _stake(pid, amount, msg.sender);\n        if (hasUserInPool[msg.sender][pid] == 0) {\n            listUserInPool[pid].push(msg.sender);\n            hasUserInPool[msg.sender][pid] = listUserInPool[pid].length;\n        }\n\n        require(\n            IErc20Token(currentPool.tokenStake).transferFrom(\n                msg.sender,\n                address(this),\n                amount\n            ),\n            \"Stake failed\"\n        );\n\n        emit Stake(\n            msg.sender,\n            amount,\n            pid\n        );\n    }\n\n    function _stake(uint256 pid, uint256 amount, address staker) private {\n        LinearPoolInfo storage currentPool = linearPoolInfo[pid];\n        uint256 blockNum = block.number;\n        uint256 currentIndex = stakedMapIndex[pid][staker];\n        Checkpoint storage current = stakedMap[pid][staker][currentIndex];\n\n        _updateTotalClaimForLatestStakeBlock(pid, currentPool.rewardPerBlock, current, blockNum, staker);\n\n        uint256 newStakedAmount = current.stakedAmount.add(amount);\n        stakedMapIndex[pid][staker] = stakedMapIndex[pid][staker].add(1);\n        stakedMap[pid][staker][stakedMapIndex[pid][staker]] = Checkpoint({\n            blockNumber: blockNum,\n            stakedAmount: newStakedAmount\n        });\n        currentPool.totalStaked = currentPool.totalStaked.add(amount);\n    }\n\n    /**\n     * @notice Claims reward\n     *\n     */\n    function claimReward(uint256 pid) public pidValid(pid) {\n        _claim(pid, msg.sender);\n    }\n\n    function claimAllReward() public {\n        address staker = msg.sender;\n        uint256 totalClaim;\n        for (uint i = 0; i < linearPoolInfo.length; i++) {\n            uint256 amount = _getAmountRewardInPool(i, staker);\n            claimedByUser[i][staker] = claimedByUser[i][staker].add(amount);\n            totalClaim = totalClaim.add(amount);\n        }\n\n        require(\n            IErc20Token(rewardAddress).transfer(\n                staker,\n                totalClaim\n            ),\n            \"Claim failed\"\n        );\n\n        emit Claim(staker, totalClaim);\n    }\n\n    function _claim(uint256 pid, address staker) private {\n        uint256 amount = _getAmountRewardInPool(pid, staker);\n        claimedByUser[pid][staker] = claimedByUser[pid][staker].add(amount);\n        require(\n            IErc20Token(rewardAddress).transfer(\n                staker,\n                amount\n            ),\n            \"Claim failed\"\n        );\n        emit Claim(staker, amount);\n    }\n\n    /**\n     * @notice Withdraws the provided amount of staked\n     *\n     * @param amount The amount to withdraw\n    */\n    function withdraw(uint256 pid, uint256 amount) public pidValid(pid) {\n        LinearPoolInfo storage currentPool = linearPoolInfo[pid];\n        uint256 blockNum = block.number;\n        address staker = msg.sender;\n        require(amount >= currentPool.minimumWithdraw, \"Too small amount\");\n\n        uint256 currentIndex = stakedMapIndex[pid][staker];\n        Checkpoint memory current = stakedMap[pid][staker][currentIndex];\n        require(amount <= current.stakedAmount && amount > 0, \"Invalid amount\");\n\n        uint256 reward = _getAmountRewardInPool(pid, staker);\n        _updateTotalClaimForLatestStakeBlock(pid, currentPool.rewardPerBlock, current, blockNum, staker);\n\n        uint256 newStakedAmount = current.stakedAmount.sub(amount);\n        stakedMapIndex[pid][staker] = stakedMapIndex[pid][staker].add(1);\n        stakedMap[pid][staker][stakedMapIndex[pid][staker]] = Checkpoint({\n            blockNumber: blockNum,\n            stakedAmount: newStakedAmount\n        });\n\n        if (newStakedAmount == 0 && hasUserInPool[staker][pid] > 0) {\n            uint256 pid_1 = pid; // stack to deep\n            address userAddressInLatest = listUserInPool[pid_1][listUserInPool[pid_1].length - 1];\n            uint256 userIndexForSender = hasUserInPool[staker][pid_1];\n            uint256 indexUser = userIndexForSender.sub(1);\n\n            listUserInPool[pid_1][indexUser] = userAddressInLatest;\n            hasUserInPool[userAddressInLatest][pid_1] = indexUser.add(1);\n            hasUserInPool[staker][pid_1] = 0;\n            listUserInPool[pid_1].pop();\n        }\n\n        currentPool.totalStaked = currentPool.totalStaked.sub(amount);\n        if (reward > 0) {\n            claimedByUser[pid][staker] = claimedByUser[pid][staker].add(reward);\n            require(\n                IErc20Token(rewardAddress).transfer(\n                    staker,\n                    reward\n                ),\n                \"Get reward failed\"\n            );\n        }\n        require(\n            IErc20Token(currentPool.tokenStake).transfer(\n                staker,\n                amount\n            ),\n            \"Withdraw failed\"\n        );\n\n        emit Withdraw(staker, amount, reward);\n\n    }\n\n    function emergencyWithdraw(uint256 pid) public pidValid(pid) {\n        LinearPoolInfo storage currentPool = linearPoolInfo[pid];\n        address staker = msg.sender;\n        uint256 blockNum = block.number;\n\n        uint256 currentIndex = stakedMapIndex[pid][staker];\n        Checkpoint memory current = stakedMap[pid][staker][currentIndex];\n\n        require(current.stakedAmount > 0, \"Not valid amount\");\n\n        _updateTotalClaimForLatestStakeBlock(pid, currentPool.rewardPerBlock, current, blockNum, staker);\n\n        stakedMapIndex[pid][staker] = stakedMapIndex[pid][staker].add(1);\n        stakedMap[pid][staker][stakedMapIndex[pid][staker]] = Checkpoint({\n            blockNumber: blockNum,\n            stakedAmount: 0\n        });\n        currentPool.totalStaked = currentPool.totalStaked.sub(current.stakedAmount);\n        // rewardFromEmergencyWithdraw = rewardFromEmergencyWithdraw.add(totalClaimForLatestStakeBlock[pid][staker].sub(claimedByUser[pid][staker]));\n        claimedByUser[pid][staker] = totalClaimForLatestStakeBlock[pid][staker];\n        if (hasUserInPool[staker][pid] > 0) {\n            uint256 pid_1 = pid; // stack to deep\n            address userAddressInLatest = listUserInPool[pid_1][listUserInPool[pid_1].length - 1];\n            uint256 userIndexForSender = hasUserInPool[staker][pid_1];\n            uint256 indexUser = userIndexForSender.sub(1);\n\n            listUserInPool[pid_1][indexUser] = userAddressInLatest;\n            hasUserInPool[userAddressInLatest][pid_1] = indexUser.add(1);\n            hasUserInPool[staker][pid_1] = 0;\n            listUserInPool[pid_1].pop();\n        }\n        require(\n            IErc20Token(currentPool.tokenStake).transfer(\n                staker,\n                current.stakedAmount\n            ),\n            \"Withdraw failed\"\n        );\n        emit EmergencyWithdraw(staker, current.stakedAmount);\n    }\n\n    function autoCoumpound(uint256 pid) public {\n        LinearPoolInfo memory currentPool = linearPoolInfo[pid];\n        require(currentPool.tokenStake == rewardAddress, \"Pool not valid\");\n        address[] memory listUser = listUserInPool[pid];\n        uint256 totalReward;\n        for (uint256 index = 0; index < listUser.length; index++) {\n            address staker = listUser[index];\n            uint256 reward = _getAmountRewardInPool(pid, staker);\n            totalReward = totalReward.add(reward.mul(autoCompoundingFee).div(PERCENT));\n            _stake(pid, reward.mul(PERCENT.sub(autoCompoundingFee)), staker);\n        }\n\n        require(\n            IErc20Token(currentPool.tokenStake).transfer(\n                msg.sender,\n                totalReward\n            ),\n            \"AutoCompounding failed\"\n        );\n\n        emit AutoCompounding(msg.sender, totalReward);\n\n    }\n\n    /*****************\n     * ADMIN ACTIONS *\n     *****************/\n\n    function addNewStakingPool(\n        uint256 minimumStakeAmount,\n        uint256 rewardPerBlock,\n        address tokenStake,\n        uint256 minimumWithdraw\n    ) public onlyOwner {\n        linearPoolInfo.push(\n            LinearPoolInfo({\n                totalStaked: 0,\n                minimumStakeAmount: minimumStakeAmount,\n                rewardPerBlock: rewardPerBlock,\n                tokenStake: tokenStake,\n                minimumWithdraw: minimumWithdraw\n            })\n        );\n\n        emit PoolCreated(linearPoolInfo.length-1, minimumStakeAmount, rewardPerBlock, tokenStake, minimumWithdraw);\n    }\n\n    function setNewRewardToken(address newToken) public onlyOwner {\n        rewardAddress = newToken;\n    }\n\n    // function claimRewardFromEmergencyWithdraw() public onlyOwner {\n    //     uint256 amount = rewardFromEmergencyWithdraw;\n    //     rewardFromEmergencyWithdraw = 0;\n    //     require(\n    //         IErc20Token(rewardAddress).transfer(\n    //             msg.sender,\n    //             amount\n    //         ),\n    //         \"RewardFromEmergencyWithdraw failed\"\n    //     );\n    //     emit RewardFromEmergencyWithdraw(msg.sender, amount);\n    // }\n\n    function setStakingPool(\n        uint256 pid,\n        uint256 minimumStakeAmount,\n        uint256 rewardPerBlock,\n        uint256 minimumWithdraw\n    ) public onlyOwner pidValid(pid) {\n        LinearPoolInfo storage pool = linearPoolInfo[pid];\n        pool.minimumStakeAmount = minimumStakeAmount;\n        pool.rewardPerBlock = rewardPerBlock;\n        pool.minimumWithdraw = minimumWithdraw;\n        emit ChangeStakingPoolSetting(\n            pid,\n            minimumStakeAmount,\n            rewardPerBlock,\n            minimumWithdraw\n        );\n    }\n\n    function changeAutoCompoundingFee(uint256 _fee) public onlyOwner {\n        uint256 oldFee = autoCompoundingFee;\n        autoCompoundingFee = _fee;\n        emit ChangeAutoCompoundingFee(oldFee ,_fee);\n    }\n\n    /********************\n     * VALUE ACTIONS *\n     ********************/\n\n    /**\n     * @notice Does not accept BNB.\n     */\n    receive () external payable {\n        revert();\n    }\n\n}\n"
    },
    "contracts/SafeMath.sol": {
      "content": "pragma solidity ^0.8.0;\n\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\n// Subject to the MIT license.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, errorMessage);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot underflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction underflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot underflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, errorMessage);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers.\n     * Reverts on division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers.\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/IErc20Token.sol": {
      "content": "pragma solidity ^0.8.0;\n\ninterface IErc20Token {\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/StakingStorage.sol": {
      "content": "pragma solidity ^0.8.0;\n\n/// @title Staking Storage Contract\ncontract StakingStorage {\n    uint256 public constant PERCENT = 10000;\n    uint256 public constant REWARD_SCALE = 10**18;\n    struct Checkpoint {\n        uint256 blockNumber;\n        uint256 stakedAmount;\n    }\n\n    struct LinearPoolInfo {\n        uint256 totalStaked;\n        uint256 minimumStakeAmount;\n        uint256 rewardPerBlock;\n        address tokenStake;\n        uint256 minimumWithdraw;\n    }\n\n    // config\n    address public rewardAddress;\n    uint256 public autoCompoundingFee;\n\n    //state\n    // uint256 public rewardFromEmergencyWithdraw;\n    // pool id => address user => total reward claimed;\n    mapping (uint256 => mapping(address => uint256)) public claimedByUser;\n    // pool id => address user => total reward in latest checkpoint\n    mapping (uint256 => mapping(address => uint256)) public totalClaimForLatestStakeBlock;\n    // pool id => address user => array checkpoint for user\n    mapping (uint256 => mapping(address => mapping (uint256 => Checkpoint))) public stakedMap;\n    // pool id => address user => latest index checkpoint for user\n    mapping (uint256 => mapping(address => uint256)) public stakedMapIndex;\n    //pool id => list address user in pool.\n    mapping (uint256 => address[]) public listUserInPool;\n    // address user => pool id => index address user in listUserInPool;\n    mapping (address => mapping(uint256 => uint256)) public hasUserInPool; // We using value 0 to check user has been pool. So, index address user in listUserInPool will increase 1; \n    LinearPoolInfo[] public linearPoolInfo;\n}\n"
    },
    "contracts/StakingEvent.sol": {
      "content": "pragma solidity ^0.8.0;\n\n/// @title Staking Event Contract\ncontract StakingEvent {\n\n    event Stake(\n        address indexed staker,\n        uint256 indexed amount,\n        uint256 indexed pid\n    );\n\n    event Claim(\n        address indexed toAddress,\n        uint256 indexed amount\n    );\n\n    event Withdraw(\n        address indexed toAddress,\n        uint256 indexed amount,\n        uint256 reward\n    );\n\n    event EmergencyWithdraw(\n        address indexed toAddress,\n        uint256 indexed amount\n    );\n\n    event GuardianshipTransferAuthorization(\n        address indexed authorizedAddress\n    );\n\n    event GuardianUpdate(\n        address indexed oldValue,\n        address indexed newValue\n    );\n\n    event MinimumStakeAmountUpdate(\n        uint256 indexed oldValue,\n        uint256 indexed newValue\n    );\n\n    event DepositRewardPool(\n        address indexed depositor,\n        uint256 indexed amount\n    );\n\n    event WithdrawRewardPool(\n        address indexed toAddress,\n        uint256 indexed amount\n    );\n\n    event AutoCompounding(\n        address indexed toAddress,\n        uint256 indexed amount\n    );\n\n    event RewardFromEmergencyWithdraw(\n        address indexed toAddress,\n        uint256 indexed amount\n    );\n\n    event PoolCreated(\n        uint256 pid,\n        uint256 minimumStakeAmount,\n        uint256 rewardPerBlock,\n        address tokenStake,\n        uint256 minimumWithdraw\n    );\n\n    event ChangeAutoCompoundingFee(\n        uint256 oldFee,\n        uint256 newFee\n    );\n\n    event ChangeStakingPoolSetting(\n        uint256 pid,\n        uint256 minimumStakeAmount,\n        uint256 rewardPerBlock,\n        uint256 minimumWithdraw\n    );\n}\n"
    },
    "contracts/StakingTest.sol": {
      "content": "pragma solidity ^0.8.0;\nimport \"./Staking.sol\";\n\ncontract StakingTest is Staking {\n    constructor(address chn, uint256 _autoCompoundingFee) Staking(chn, _autoCompoundingFee) {\n    }\n    function setRewardFromEmergencyWithdraw(uint256 newValue) public {\n        // rewardFromEmergencyWithdraw = newValue;\n    }\n\n}"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 1000000,
      "details": {
        "yul": true,
        "deduplicate": true,
        "cse": true,
        "constantOptimizer": true
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}