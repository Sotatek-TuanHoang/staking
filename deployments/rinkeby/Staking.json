{
  "address": "0xE8A4B2136d4f0f79f513cAC1D6fE368BeF70Fd14",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "chn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_autoCompoundingFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AutoCompounding",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "ChangeAutoCompoundingFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumStakeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumWithdraw",
          "type": "uint256"
        }
      ],
      "name": "ChangeStakingPoolSetting",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositRewardPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "GuardianUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorizedAddress",
          "type": "address"
        }
      ],
      "name": "GuardianshipTransferAuthorization",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "MinimumStakeAmountUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumStakeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenStake",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumWithdraw",
          "type": "uint256"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardFromEmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawRewardPool",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minimumStakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenStake",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minimumWithdraw",
          "type": "uint256"
        }
      ],
      "name": "addNewStakingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoCompoundingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "autoCoumpound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "diffBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "changeAutoCompoundingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAllReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimedByUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "getAllAmountReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "getAmountRewardInPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "getCoumpoundingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "getPoolInfoFromId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimumStakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPerBlock",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenStake",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minimumWithdraw",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakingStorage.LinearPoolInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPriorStakedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "getStakedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hasUserInPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "linearPoolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumStakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenStake",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minimumWithdraw",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listUserInPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newToken",
          "type": "address"
        }
      ],
      "name": "setNewRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumStakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumWithdraw",
          "type": "uint256"
        }
      ],
      "name": "setStakingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakedMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakedMapIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalClaimForLatestStakeBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x07586144c0a9ebc0d4848145f9e049fe414003bc0cae93abfdf8eb248b1fb94b",
  "receipt": {
    "to": null,
    "from": "0xD51bD125DEEe0d3CB12cf333B8910Ead844b5615",
    "contractAddress": "0xE8A4B2136d4f0f79f513cAC1D6fE368BeF70Fd14",
    "transactionIndex": 18,
    "gasUsed": "3269704",
    "logsBloom": "0x
    "blockHash": "0xe389b57f7712c4da092d15c79c2c002b5a9b7b02f3a82add0bdb71ca485c1af3",
    "transactionHash": "0x07586144c0a9ebc0d4848145f9e049fe414003bc0cae93abfdf8eb248b1fb94b",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 9819421,
        "transactionHash": "0x07586144c0a9ebc0d4848145f9e049fe414003bc0cae93abfdf8eb248b1fb94b",
        "address": "0xE8A4B2136d4f0f79f513cAC1D6fE368BeF70Fd14",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d51bd125deee0d3cb12cf333b8910ead844b5615"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0xe389b57f7712c4da092d15c79c2c002b5a9b7b02f3a82add0bdb71ca485c1af3"
      }
    ],
    "blockNumber": 9819421,
    "cumulativeGasUsed": "5133562",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x47974400432ADbCCAC6BdedAE73DDAaaFA91A5ec",
    "1000"
  ],
  "solcInputHash": "c1ca74577686f87feceb05c454ac4c81",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_autoCompoundingFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AutoCompounding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"ChangeAutoCompoundingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumStakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumWithdraw\",\"type\":\"uint256\"}],\"name\":\"ChangeStakingPoolSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositRewardPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"GuardianUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizedAddress\",\"type\":\"address\"}],\"name\":\"GuardianshipTransferAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinimumStakeAmountUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumStakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenStake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumWithdraw\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardFromEmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawRewardPool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenStake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumWithdraw\",\"type\":\"uint256\"}],\"name\":\"addNewStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoCompoundingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"autoCoumpound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diffBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeAutoCompoundingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getAllAmountReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getAmountRewardInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getCoumpoundingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getPoolInfoFromId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenStake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumWithdraw\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingStorage.LinearPoolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasUserInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"linearPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenStake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumWithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listUserInPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setNewRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumWithdraw\",\"type\":\"uint256\"}],\"name\":\"setStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedMapIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalClaimForLatestStakeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256,uint256)\":{\"params\":{\"amount\":\"The amount to withdraw\"}}},\"title\":\"Staking Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimReward(uint256)\":{\"notice\":\"Claims reward\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraws the provided amount of staked\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/IErc20Token.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IErc20Token {\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfd06f7eb49588f9cf920206c96c1a33165a5d2df4fbc22545a789b62ae16bc97\"},\"contracts/SafeMath.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x89eeabd929bcf28e6e3ae662432728ad2450f54e186206c441b273d7a962cd5e\"},\"contracts/Staking.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IErc20Token.sol\\\";\\nimport \\\"./StakingStorage.sol\\\";\\nimport \\\"./StakingEvent.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title Staking Contract\\ncontract Staking is StakingStorage, StakingEvent, Ownable {\\n    using SafeMath for uint256;\\n\\n    constructor(address chn, uint256 _autoCompoundingFee) Ownable() {\\n        rewardAddress = chn;\\n        autoCompoundingFee = _autoCompoundingFee;\\n    }\\n\\n    /********************\\n     * MODIFIER *\\n     ********************/\\n\\n    modifier pidValid(uint256 pid) {\\n        require(linearPoolInfo.length > pid && pid >= 0, \\\"pid not valid\\\");\\n        _;\\n    }\\n\\n    /********************\\n     * STANDARD ACTIONS *\\n     ********************/\\n\\n    function getPoolInfoFromId(uint pid) public view pidValid(pid) returns (LinearPoolInfo memory) {\\n        return linearPoolInfo[pid];\\n    }\\n\\n    function getStakedAmount(uint256 pid, address staker) public view pidValid(pid) returns (uint256) {\\n        uint256 currentIndex = stakedMapIndex[pid][staker];\\n        Checkpoint memory current = stakedMap[pid][staker][currentIndex];\\n        return current.stakedAmount;\\n    }\\n\\n    function getPriorStakedAmount(uint256 pid, address staker, uint256 blockNumber) external view pidValid(pid) returns (uint256) {\\n        if (blockNumber == 0) {\\n            return getStakedAmount(pid, staker);\\n        }\\n\\n        uint256 currentIndex = stakedMapIndex[pid][staker];\\n        Checkpoint memory current = stakedMap[pid][staker][currentIndex];\\n\\n        for (uint i = current.blockNumber; i > 0; i--) {\\n            Checkpoint memory checkpoint = stakedMap[pid][staker][i];\\n            if (checkpoint.blockNumber <= blockNumber) {\\n                return checkpoint.stakedAmount;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n\\n    function getAmountRewardInPool(uint256 pid, address staker) public view pidValid(pid) returns (uint256) {\\n        return _getAmountRewardInPool(pid, staker);\\n    }\\n\\n    function getCoumpoundingReward(uint256 pid) public view pidValid(pid) returns (uint256) {\\n        LinearPoolInfo memory currentPool = linearPoolInfo[pid];\\n        require(currentPool.tokenStake == rewardAddress, \\\"Pool not valid\\\");\\n        address[] memory listUser = listUserInPool[pid];\\n        uint256 totalReward;\\n        for (uint256 index = 0; index < listUser.length; index++) {\\n            address staker = listUser[index];\\n            uint256 reward = _getAmountRewardInPool(pid, staker);\\n            totalReward = totalReward.add(reward.mul(autoCompoundingFee).div(PERCENT));\\n        }\\n        return totalReward;\\n    }\\n\\n    function calculateReward(uint256 rewardPerBlock, uint256 diffBlock, uint256 stakeAmount) public pure returns (uint256) {\\n        return rewardPerBlock.mul(diffBlock).mul(stakeAmount).div(REWARD_SCALE);\\n    }\\n\\n    function _getAmountRewardInPool(uint256 pid, address staker) private view returns (uint256) {\\n        LinearPoolInfo memory currentPool = linearPoolInfo[pid];\\n        uint256 currentIndex = stakedMapIndex[pid][staker];\\n        Checkpoint memory current = stakedMap[pid][staker][currentIndex];\\n        uint256 currentBlock = block.number;\\n        uint256 diffBlock = currentBlock.sub(current.blockNumber);\\n        uint256 reward = calculateReward(currentPool.rewardPerBlock, diffBlock, current.stakedAmount);\\n        return totalClaimForLatestStakeBlock[pid][staker].add(reward).sub(claimedByUser[pid][staker]);\\n    }\\n\\n    function getAllAmountReward(address staker) public view returns (uint256) {\\n        uint256 totalAmount;\\n        for (uint i = 0; i < linearPoolInfo.length; i++) {\\n            uint256 pendingRewardInPool = _getAmountRewardInPool(i, staker);\\n            totalAmount = totalAmount.add(pendingRewardInPool);\\n        }\\n        return totalAmount;\\n    }\\n\\n    function getBlockNumber() public view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    function _updateTotalClaimForLatestStakeBlock(uint256 pid, uint256 rewardPerBlock, Checkpoint memory checkpoint, uint256 blockNumber, address staker) private {\\n        uint256 diffBlock = blockNumber.sub(checkpoint.blockNumber);\\n        uint256 claimAmount = calculateReward(rewardPerBlock, diffBlock, checkpoint.stakedAmount);\\n        totalClaimForLatestStakeBlock[pid][staker] = totalClaimForLatestStakeBlock[pid][staker].add(claimAmount);\\n    }\\n\\n    function stake(uint256 pid, uint256 amount) public pidValid(pid) {\\n        LinearPoolInfo memory currentPool = linearPoolInfo[pid];\\n        require(amount >= currentPool.minimumStakeAmount, \\\"Too small amount\\\");\\n        _stake(pid, amount, msg.sender);\\n        if (hasUserInPool[msg.sender][pid] == 0) {\\n            listUserInPool[pid].push(msg.sender);\\n            hasUserInPool[msg.sender][pid] = listUserInPool[pid].length;\\n        }\\n\\n        require(\\n            IErc20Token(currentPool.tokenStake).transferFrom(\\n                msg.sender,\\n                address(this),\\n                amount\\n            ),\\n            \\\"Stake failed\\\"\\n        );\\n\\n        emit Stake(\\n            msg.sender,\\n            amount,\\n            pid\\n        );\\n    }\\n\\n    function _stake(uint256 pid, uint256 amount, address staker) private {\\n        LinearPoolInfo storage currentPool = linearPoolInfo[pid];\\n        uint256 blockNum = block.number;\\n        uint256 currentIndex = stakedMapIndex[pid][staker];\\n        Checkpoint storage current = stakedMap[pid][staker][currentIndex];\\n\\n        _updateTotalClaimForLatestStakeBlock(pid, currentPool.rewardPerBlock, current, blockNum, staker);\\n\\n        uint256 newStakedAmount = current.stakedAmount.add(amount);\\n        stakedMapIndex[pid][staker] = stakedMapIndex[pid][staker].add(1);\\n        stakedMap[pid][staker][stakedMapIndex[pid][staker]] = Checkpoint({\\n            blockNumber: blockNum,\\n            stakedAmount: newStakedAmount\\n        });\\n        currentPool.totalStaked = currentPool.totalStaked.add(amount);\\n    }\\n\\n    /**\\n     * @notice Claims reward\\n     *\\n     */\\n    function claimReward(uint256 pid) public pidValid(pid) {\\n        _claim(pid, msg.sender);\\n    }\\n\\n    function claimAllReward() public {\\n        address staker = msg.sender;\\n        uint256 totalClaim;\\n        for (uint i = 0; i < linearPoolInfo.length; i++) {\\n            uint256 amount = _getAmountRewardInPool(i, staker);\\n            claimedByUser[i][staker] = claimedByUser[i][staker].add(amount);\\n            totalClaim = totalClaim.add(amount);\\n        }\\n\\n        require(\\n            IErc20Token(rewardAddress).transfer(\\n                staker,\\n                totalClaim\\n            ),\\n            \\\"Claim failed\\\"\\n        );\\n\\n        emit Claim(staker, totalClaim);\\n    }\\n\\n    function _claim(uint256 pid, address staker) private {\\n        uint256 amount = _getAmountRewardInPool(pid, staker);\\n        claimedByUser[pid][staker] = claimedByUser[pid][staker].add(amount);\\n        require(\\n            IErc20Token(rewardAddress).transfer(\\n                staker,\\n                amount\\n            ),\\n            \\\"Claim failed\\\"\\n        );\\n        emit Claim(staker, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws the provided amount of staked\\n     *\\n     * @param amount The amount to withdraw\\n    */\\n    function withdraw(uint256 pid, uint256 amount) public pidValid(pid) {\\n        LinearPoolInfo storage currentPool = linearPoolInfo[pid];\\n        uint256 blockNum = block.number;\\n        address staker = msg.sender;\\n        require(amount >= currentPool.minimumWithdraw, \\\"Too small amount\\\");\\n\\n        uint256 currentIndex = stakedMapIndex[pid][staker];\\n        Checkpoint memory current = stakedMap[pid][staker][currentIndex];\\n        require(amount <= current.stakedAmount && amount > 0, \\\"Invalid amount\\\");\\n\\n        uint256 reward = _getAmountRewardInPool(pid, staker);\\n        _updateTotalClaimForLatestStakeBlock(pid, currentPool.rewardPerBlock, current, blockNum, staker);\\n\\n        uint256 newStakedAmount = current.stakedAmount.sub(amount);\\n        stakedMapIndex[pid][staker] = stakedMapIndex[pid][staker].add(1);\\n        stakedMap[pid][staker][stakedMapIndex[pid][staker]] = Checkpoint({\\n            blockNumber: blockNum,\\n            stakedAmount: newStakedAmount\\n        });\\n\\n        if (newStakedAmount == 0 && hasUserInPool[staker][pid] > 0) {\\n            uint256 pid_1 = pid; // stack to deep\\n            address userAddressInLatest = listUserInPool[pid_1][listUserInPool[pid_1].length - 1];\\n            uint256 userIndexForSender = hasUserInPool[staker][pid_1];\\n            uint256 indexUser = userIndexForSender.sub(1);\\n\\n            listUserInPool[pid_1][indexUser] = userAddressInLatest;\\n            hasUserInPool[userAddressInLatest][pid_1] = indexUser.add(1);\\n            hasUserInPool[staker][pid_1] = 0;\\n            listUserInPool[pid_1].pop();\\n        }\\n\\n        currentPool.totalStaked = currentPool.totalStaked.sub(amount);\\n        if (reward > 0) {\\n            claimedByUser[pid][staker] = claimedByUser[pid][staker].add(reward);\\n            require(\\n                IErc20Token(rewardAddress).transfer(\\n                    staker,\\n                    reward\\n                ),\\n                \\\"Get reward failed\\\"\\n            );\\n        }\\n        require(\\n            IErc20Token(currentPool.tokenStake).transfer(\\n                staker,\\n                amount\\n            ),\\n            \\\"Withdraw failed\\\"\\n        );\\n\\n        emit Withdraw(staker, amount, reward);\\n\\n    }\\n\\n    function emergencyWithdraw(uint256 pid) public pidValid(pid) {\\n        LinearPoolInfo storage currentPool = linearPoolInfo[pid];\\n        address staker = msg.sender;\\n        uint256 blockNum = block.number;\\n\\n        uint256 currentIndex = stakedMapIndex[pid][staker];\\n        Checkpoint memory current = stakedMap[pid][staker][currentIndex];\\n\\n        require(current.stakedAmount > 0, \\\"Not valid amount\\\");\\n\\n        _updateTotalClaimForLatestStakeBlock(pid, currentPool.rewardPerBlock, current, blockNum, staker);\\n\\n        stakedMapIndex[pid][staker] = stakedMapIndex[pid][staker].add(1);\\n        stakedMap[pid][staker][stakedMapIndex[pid][staker]] = Checkpoint({\\n            blockNumber: blockNum,\\n            stakedAmount: 0\\n        });\\n        currentPool.totalStaked = currentPool.totalStaked.sub(current.stakedAmount);\\n        // rewardFromEmergencyWithdraw = rewardFromEmergencyWithdraw.add(totalClaimForLatestStakeBlock[pid][staker].sub(claimedByUser[pid][staker]));\\n        claimedByUser[pid][staker] = totalClaimForLatestStakeBlock[pid][staker];\\n        if (hasUserInPool[staker][pid] > 0) {\\n            uint256 pid_1 = pid; // stack to deep\\n            address userAddressInLatest = listUserInPool[pid_1][listUserInPool[pid_1].length - 1];\\n            uint256 userIndexForSender = hasUserInPool[staker][pid_1];\\n            uint256 indexUser = userIndexForSender.sub(1);\\n\\n            listUserInPool[pid_1][indexUser] = userAddressInLatest;\\n            hasUserInPool[userAddressInLatest][pid_1] = indexUser.add(1);\\n            hasUserInPool[staker][pid_1] = 0;\\n            listUserInPool[pid_1].pop();\\n        }\\n        require(\\n            IErc20Token(currentPool.tokenStake).transfer(\\n                staker,\\n                current.stakedAmount\\n            ),\\n            \\\"Withdraw failed\\\"\\n        );\\n        emit EmergencyWithdraw(staker, current.stakedAmount);\\n    }\\n\\n    function autoCoumpound(uint256 pid) public {\\n        LinearPoolInfo memory currentPool = linearPoolInfo[pid];\\n        require(currentPool.tokenStake == rewardAddress, \\\"Pool not valid\\\");\\n        address[] memory listUser = listUserInPool[pid];\\n        uint256 totalReward;\\n        for (uint256 index = 0; index < listUser.length; index++) {\\n            address staker = listUser[index];\\n            uint256 reward = _getAmountRewardInPool(pid, staker);\\n            totalReward = totalReward.add(reward.mul(autoCompoundingFee).div(PERCENT));\\n            _stake(pid, reward.mul(PERCENT.sub(autoCompoundingFee)), staker);\\n        }\\n\\n        require(\\n            IErc20Token(currentPool.tokenStake).transfer(\\n                msg.sender,\\n                totalReward\\n            ),\\n            \\\"AutoCompounding failed\\\"\\n        );\\n\\n        emit AutoCompounding(msg.sender, totalReward);\\n\\n    }\\n\\n    /*****************\\n     * ADMIN ACTIONS *\\n     *****************/\\n\\n    function addNewStakingPool(\\n        uint256 minimumStakeAmount,\\n        uint256 rewardPerBlock,\\n        address tokenStake,\\n        uint256 minimumWithdraw\\n    ) public onlyOwner {\\n        linearPoolInfo.push(\\n            LinearPoolInfo({\\n                totalStaked: 0,\\n                minimumStakeAmount: minimumStakeAmount,\\n                rewardPerBlock: rewardPerBlock,\\n                tokenStake: tokenStake,\\n                minimumWithdraw: minimumWithdraw\\n            })\\n        );\\n\\n        emit PoolCreated(linearPoolInfo.length-1, minimumStakeAmount, rewardPerBlock, tokenStake, minimumWithdraw);\\n    }\\n\\n    function setNewRewardToken(address newToken) public onlyOwner {\\n        rewardAddress = newToken;\\n    }\\n\\n    // function claimRewardFromEmergencyWithdraw() public onlyOwner {\\n    //     uint256 amount = rewardFromEmergencyWithdraw;\\n    //     rewardFromEmergencyWithdraw = 0;\\n    //     require(\\n    //         IErc20Token(rewardAddress).transfer(\\n    //             msg.sender,\\n    //             amount\\n    //         ),\\n    //         \\\"RewardFromEmergencyWithdraw failed\\\"\\n    //     );\\n    //     emit RewardFromEmergencyWithdraw(msg.sender, amount);\\n    // }\\n\\n    function setStakingPool(\\n        uint256 pid,\\n        uint256 minimumStakeAmount,\\n        uint256 rewardPerBlock,\\n        uint256 minimumWithdraw\\n    ) public onlyOwner pidValid(pid) {\\n        LinearPoolInfo storage pool = linearPoolInfo[pid];\\n        pool.minimumStakeAmount = minimumStakeAmount;\\n        pool.rewardPerBlock = rewardPerBlock;\\n        pool.minimumWithdraw = minimumWithdraw;\\n        emit ChangeStakingPoolSetting(\\n            pid,\\n            minimumStakeAmount,\\n            rewardPerBlock,\\n            minimumWithdraw\\n        );\\n    }\\n\\n    function changeAutoCompoundingFee(uint256 _fee) public onlyOwner {\\n        uint256 oldFee = autoCompoundingFee;\\n        autoCompoundingFee = _fee;\\n        emit ChangeAutoCompoundingFee(oldFee ,_fee);\\n    }\\n\\n    /********************\\n     * VALUE ACTIONS *\\n     ********************/\\n\\n    /**\\n     * @notice Does not accept BNB.\\n     */\\n    receive () external payable {\\n        revert();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1f3b2a3b2bc6ba574ed9f3f8d8300e4bad62216d309e7e3c173ff8654fcd33fa\"},\"contracts/StakingEvent.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n/// @title Staking Event Contract\\ncontract StakingEvent {\\n\\n    event Stake(\\n        address indexed staker,\\n        uint256 indexed amount,\\n        uint256 indexed pid\\n    );\\n\\n    event Claim(\\n        address indexed toAddress,\\n        uint256 indexed amount\\n    );\\n\\n    event Withdraw(\\n        address indexed toAddress,\\n        uint256 indexed amount,\\n        uint256 reward\\n    );\\n\\n    event EmergencyWithdraw(\\n        address indexed toAddress,\\n        uint256 indexed amount\\n    );\\n\\n    event GuardianshipTransferAuthorization(\\n        address indexed authorizedAddress\\n    );\\n\\n    event GuardianUpdate(\\n        address indexed oldValue,\\n        address indexed newValue\\n    );\\n\\n    event MinimumStakeAmountUpdate(\\n        uint256 indexed oldValue,\\n        uint256 indexed newValue\\n    );\\n\\n    event DepositRewardPool(\\n        address indexed depositor,\\n        uint256 indexed amount\\n    );\\n\\n    event WithdrawRewardPool(\\n        address indexed toAddress,\\n        uint256 indexed amount\\n    );\\n\\n    event AutoCompounding(\\n        address indexed toAddress,\\n        uint256 indexed amount\\n    );\\n\\n    event RewardFromEmergencyWithdraw(\\n        address indexed toAddress,\\n        uint256 indexed amount\\n    );\\n\\n    event PoolCreated(\\n        uint256 pid,\\n        uint256 minimumStakeAmount,\\n        uint256 rewardPerBlock,\\n        address tokenStake,\\n        uint256 minimumWithdraw\\n    );\\n\\n    event ChangeAutoCompoundingFee(\\n        uint256 oldFee,\\n        uint256 newFee\\n    );\\n\\n    event ChangeStakingPoolSetting(\\n        uint256 pid,\\n        uint256 minimumStakeAmount,\\n        uint256 rewardPerBlock,\\n        uint256 minimumWithdraw\\n    );\\n}\\n\",\"keccak256\":\"0xb1283ea20b5857d179e02e193528d74cc14edce6d98858ee89fdd125e0f0430c\"},\"contracts/StakingStorage.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n/// @title Staking Storage Contract\\ncontract StakingStorage {\\n    uint256 public constant PERCENT = 10000;\\n    uint256 public constant REWARD_SCALE = 10**18;\\n    struct Checkpoint {\\n        uint256 blockNumber;\\n        uint256 stakedAmount;\\n    }\\n\\n    struct LinearPoolInfo {\\n        uint256 totalStaked;\\n        uint256 minimumStakeAmount;\\n        uint256 rewardPerBlock;\\n        address tokenStake;\\n        uint256 minimumWithdraw;\\n    }\\n\\n    // config\\n    address public rewardAddress;\\n    uint256 public autoCompoundingFee;\\n\\n    //state\\n    // uint256 public rewardFromEmergencyWithdraw;\\n    // pool id => address user => total reward claimed;\\n    mapping (uint256 => mapping(address => uint256)) public claimedByUser;\\n    // pool id => address user => total reward in latest checkpoint\\n    mapping (uint256 => mapping(address => uint256)) public totalClaimForLatestStakeBlock;\\n    // pool id => address user => array checkpoint for user\\n    mapping (uint256 => mapping(address => mapping (uint256 => Checkpoint))) public stakedMap;\\n    // pool id => address user => latest index checkpoint for user\\n    mapping (uint256 => mapping(address => uint256)) public stakedMapIndex;\\n    //pool id => list address user in pool.\\n    mapping (uint256 => address[]) public listUserInPool;\\n    // address user => pool id => index address user in listUserInPool;\\n    mapping (address => mapping(uint256 => uint256)) public hasUserInPool; // We using value 0 to check user has been pool. So, index address user in listUserInPool will increase 1; \\n    LinearPoolInfo[] public linearPoolInfo;\\n}\\n\",\"keccak256\":\"0x56ada3daecbc84025411dad93497ea2ba37118e3e729dd127378c9d46ea3dff3\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101e75760003560e01c80638da5cb5b11610102578063d5e3518411610095578063ed28ea0511610064578063ed28ea051461056f578063f2fde38b1461058f578063fe968e5f146105af578063fec00370146105cf576101f1565b8063d5e35184146104db578063dbea1b9e1461050c578063e17be67d1461053a578063ea4338ae1461054f576101f1565b8063b110ee3f116100d1578063b110ee3f14610471578063b85a8b2014610486578063b8e94b631461049b578063c3812f15146104bb576101f1565b80638da5cb5b146103fc578063a8989eed14610411578063a8e62b9714610431578063ae169a5014610451576101f1565b80635312ea8e1161017a57806382a4c8811161014957806382a4c88114610385578063890334a2146103a55780638a623d86146103c55780638cf57cb9146103da576101f1565b80635312ea8e14610310578063715018a61461033057806371a1372d146103455780637b0472f014610365576101f1565b80633a71ede8116101b65780633a71ede81461029b57806342cbb15c146102bb578063441a3e70146102d057806352a64155146102f0576101f1565b80631a5dc445146101f65780632608d9bc14610218578063284570bb1461024e57806334d38dad1461027b576101f1565b366101f157600080fd5b600080fd5b34801561020257600080fd5b506102166102113660046131b4565b6105ef565b005b34801561022457600080fd5b506102386102333660046131cc565b610916565b6040516102459190613769565b60405180910390f35b34801561025a57600080fd5b5061026e6102693660046131b4565b610973565b6040516102459190613719565b34801561028757600080fd5b5061021661029636600461324c565b610a65565b3480156102a757600080fd5b506102386102b63660046131cc565b610c69565b3480156102c757600080fd5b50610238610d1e565b3480156102dc57600080fd5b506102166102eb36600461322b565b610d22565b3480156102fc57600080fd5b5061023861030b3660046131cc565b61153c565b34801561031c57600080fd5b5061021661032b3660046131b4565b611559565b34801561033c57600080fd5b50610216611af7565b34801561035157600080fd5b50610238610360366004613151565b611b76565b34801561037157600080fd5b5061021661038036600461322b565b611bbd565b34801561039157600080fd5b506102386103a03660046131b4565b611e66565b3480156103b157600080fd5b506102166103c03660046131b4565b6120a6565b3480156103d157600080fd5b5061021661215f565b3480156103e657600080fd5b506103ef61232f565b60405161024591906132e4565b34801561040857600080fd5b506103ef61234b565b34801561041d57600080fd5b5061021661042c3660046132b3565b612367565b34801561043d57600080fd5b5061023861044c366004613288565b6124cd565b34801561045d57600080fd5b5061021661046c3660046131b4565b6124ef565b34801561047d57600080fd5b50610238612544565b34801561049257600080fd5b5061023861254a565b3480156104a757600080fd5b506102166104b6366004613151565b612550565b3480156104c757600080fd5b506103ef6104d636600461322b565b61260a565b3480156104e757600080fd5b506104fb6104f63660046131b4565b61264f565b604051610245959493929190613780565b34801561051857600080fd5b5061052c6105273660046131f7565b6126a9565b604051610245929190613772565b34801561054657600080fd5b506102386126d3565b34801561055b57600080fd5b5061023861056a3660046131f7565b6126df565b34801561057b57600080fd5b5061023861058a3660046131cc565b61283a565b34801561059b57600080fd5b506102166105aa366004613151565b612857565b3480156105bb57600080fd5b506102386105ca3660046131cc565b612923565b3480156105db57600080fd5b506102386105ea36600461316b565b612940565b60006008828154811061062b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083206040805160a081018252600590940290910180548452600181015492840192909252600282015490830152600381015473ffffffffffffffffffffffffffffffffffffffff90811660608401819052600490920154608084015292549193509116146106d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd906134cf565b60405180910390fd5b60008281526006602090815260408083208054825181850281018501909352808352919290919083018282801561074357602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610718575b50505050509050600080600090505b825181101561081b576000838281518110610796577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060006107ac878361295d565b90506107d96107d26127106107cc60015485612ad890919063ffffffff16565b90612b3e565b8590612b80565b9350610806876108006107f9600154612710612bc990919063ffffffff16565b8490612ad8565b84612c0b565b50508080610813906138ae565b915050610752565b50826060015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161085b929190613336565b602060405180830381600087803b15801561087557600080fd5b505af1158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad9190613194565b6108e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd90613574565b604051819033907fd7a74a496a9638b7aba0fdad068cbe4c42734a070b90880147304fdd2ab62fff90600090a350505050565b6000828060088054905011801561092b575060015b610961576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd90613674565b61096b848461295d565b949350505050565b61097b6130e8565b60085482908110801561098c575060015b6109c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd90613674565b600883815481106109fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020918290206040805160a081018252600590930290910180548352600181015493830193909352600283015490820152600382015473ffffffffffffffffffffffffffffffffffffffff1660608201526004909101546080820152915050919050565b610a6d612da7565b73ffffffffffffffffffffffffffffffffffffffff16610a8b61234b565b73ffffffffffffffffffffffffffffffffffffffff1614610ad8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd9061363f565b6040805160a08101825260008082526020820187815292820186815273ffffffffffffffffffffffffffffffffffffffff868116606085019081526080850187815260088054600180820183559682905296517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee360059098029788015596517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee487015592517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee5860155517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee6850180547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909216179055517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee79092019190915590547fc659fd886acdce2ad3a8fec0eba18974cbbcebe2d76037390dd629833f76c67b91610c4691613862565b85858585604051610c5b959493929190613780565b60405180910390a150505050565b60008280600880549050118015610c7e575060015b610cb4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd90613674565b5050600082815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff94909416808452938252808320549483526004825280832093835292815282822093825292835281902081518083019092528054825260010154910181905290565b4390565b600854829081108015610d33575060015b610d69576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd90613674565b600060088481548110610da5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600502019050600043905060003390508260040154851015610dfd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd906135ab565b600086815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552908352818420548a85526004845282852091855290835281842081855283529281902081518083019092528054825260010154918101829052908711801590610e715750600087115b610ea7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd90613506565b6000610eb3898561295d565b9050610ec6898760020154848888612dab565b6020820151600090610ed8908a612bc9565b60008b815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff8a168452909152902054909150610f16906001612b80565b600560008c815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550604051806040016040528087815260200182815250600460008c815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600560008e815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481526020019081526020016000206000820151816000015560208201518160010155905050806000148015611086575073ffffffffffffffffffffffffffffffffffffffff851660009081526007602090815260408083208d845290915290205415155b156112b55760008a815260066020526040812080548c9291906110ab90600190613862565b815481106110e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff8a8116845260078352604080852087865290935291832054911692509061112d826001612bc9565b60008581526006602052604090208054919250849183908110611179577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790556111d2816001612b80565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526007602081815260408084208a8552825280842095909555928d16825282528281208782528252828120819055600690915220805480611258577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055505050505b86546112c1908a612bc9565b875581156113ff5760008a815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff891684529091529020546113039083612b80565b60008b815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff808b168552925280832093909355905491517fa9059cbb00000000000000000000000000000000000000000000000000000000815291169063a9059cbb906113779088908690600401613336565b602060405180830381600087803b15801561139157600080fd5b505af11580156113a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c99190613194565b6113ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd906133cd565b60038701546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906114599088908d90600401613336565b602060405180830381600087803b15801561147357600080fd5b505af1158015611487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ab9190613194565b6114e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd90613498565b888573ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568846040516115289190613769565b60405180910390a350505050505050505050565b600260209081526000928352604080842090915290825290205481565b60085481908110801561156a575060015b6115a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd90613674565b6000600883815481106115dc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083208684526005808352604080862033808852908552818720548a8852600486528288208289528652828820818952865296829020825180840190935280548352600101549482018590529190940290910194509243929091611673576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd906136ab565b611684878660020154838688612dab565b600087815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff881684529091529020546116bf906001612b80565b600088815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff8916808552908352818420859055815180830183528881528084018581528d8652600485528386209286529184528285209585529483529220925183559051600190920191909155810151855461173b91612bc9565b8555600087815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff8816808552908352818420548b85526002845282852091855290835281842055600782528083208a8452909152902054156119c25760008781526006602052604081208054899291906117b890600190613862565b815481106117ef577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff898116845260078352604080852087865290935291832054911692509061183a826001612bc9565b60008581526006602052604090208054919250849183908110611886577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790556118df816001612b80565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526007602081815260408084208a8552825280842095909555928c16825282528281208782528252828120819055600690915220805480611965577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055505050505b600385015460208201516040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9092169163a9059cbb91611a2091889190600401613336565b602060405180830381600087803b158015611a3a57600080fd5b505af1158015611a4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a729190613194565b611aa8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd90613498565b602081015160405173ffffffffffffffffffffffffffffffffffffffff8616907f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969590600090a350505050505050565b611aff612da7565b73ffffffffffffffffffffffffffffffffffffffff16611b1d61234b565b73ffffffffffffffffffffffffffffffffffffffff1614611b6a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd9061363f565b611b746000612e48565b565b60008060005b600854811015611bb4576000611b92828661295d565b9050611b9e8382612b80565b9250508080611bac906138ae565b915050611b7c565b5090505b919050565b600854829081108015611bce575060015b611c04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd90613674565b600060088481548110611c40577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020918290206040805160a0810182526005909302909101805483526001810154938301849052600281015491830191909152600381015473ffffffffffffffffffffffffffffffffffffffff1660608301526004015460808201529150831015611cdc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd906135ab565b611ce7848433612c0b565b336000908152600760209081526040808320878452909152902054611d6857600084815260066020908152604080832080546001810182558185528385200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001633908117909155905490845260078352818420888552909252909120555b806060015173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401611da993929190613305565b602060405180830381600087803b158015611dc357600080fd5b505af1158015611dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfb9190613194565b611e31576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd90613404565b6040518490849033907f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b690600090a450505050565b60008180600880549050118015611e7b575060015b611eb1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd90613674565b600060088481548110611eed577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083206040805160a081018252600590940290910180548452600181015492840192909252600282015490830152600381015473ffffffffffffffffffffffffffffffffffffffff9081166060840181905260049092015460808401529254919350911614611f8f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd906134cf565b600084815260066020908152604080832080548251818502810185019093528083529192909190830182828015611ffc57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611fd1575b50505050509050600080600090505b825181101561209c57600083828151811061204f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000612065898361295d565b90506120856107d26127106107cc60015485612ad890919063ffffffff16565b935050508080612094906138ae565b91505061200b565b5095945050505050565b6120ae612da7565b73ffffffffffffffffffffffffffffffffffffffff166120cc61234b565b73ffffffffffffffffffffffffffffffffffffffff1614612119576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd9061363f565b60018054908290556040517ff0a8dfd34a5ef93467eda4de789ac188bbb113709ec12c60f9211d0103db6f24906121539083908590613772565b60405180910390a15050565b336000805b60085481101561220757600061217a828561295d565b600083815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff891684529091529020549091506121b79082612b80565b600083815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff891684529091529020556121f18382612b80565b92505080806121ff906138ae565b915050612164565b506000546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906122609085908590600401613336565b602060405180830381600087803b15801561227a57600080fd5b505af115801561228e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b29190613194565b6122e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd906136e2565b604051819073ffffffffffffffffffffffffffffffffffffffff8416907f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d490600090a35050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60095473ffffffffffffffffffffffffffffffffffffffff1690565b61236f612da7565b73ffffffffffffffffffffffffffffffffffffffff1661238d61234b565b73ffffffffffffffffffffffffffffffffffffffff16146123da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd9061363f565b6008548490811080156123eb575060015b612421576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd90613674565b60006008868154811061245d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906005020190508481600101819055508381600201819055508281600401819055507f1b3e62b6d2fa55eb5b813d4dd3eb7d2f61816237402204da451be5175dceb67f868686866040516124bd94939291906137b9565b60405180910390a1505050505050565b600061096b670de0b6b3a76400006107cc846124e98888612ad8565b90612ad8565b600854819081108015612500575060015b612536576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd90613674565b6125408233612ebf565b5050565b60015481565b61271081565b612558612da7565b73ffffffffffffffffffffffffffffffffffffffff1661257661234b565b73ffffffffffffffffffffffffffffffffffffffff16146125c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd9061363f565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6006602052816000526040600020818154811061262657600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169150829050565b6008818154811061265f57600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294509092909173ffffffffffffffffffffffffffffffffffffffff9091169085565b60046020908152600093845260408085208252928452828420905282529020805460019091015482565b670de0b6b3a764000081565b600083806008805490501180156126f4575060015b61272a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd90613674565b82612740576127398585610c69565b9150612832565b600085815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff881680855290835281842054898552600484528285209185529083528184208185528352928190208151808301909252805480835260019091015492820192909252905b801561282a57600088815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff8b1684528252808320848452825291829020825180840190935280548084526001909101549183019190915287106128175760200151945061283292505050565b508061282281613879565b9150506127aa565b506000935050505b509392505050565b600560209081526000928352604080842090915290825290205481565b61285f612da7565b73ffffffffffffffffffffffffffffffffffffffff1661287d61234b565b73ffffffffffffffffffffffffffffffffffffffff16146128ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd9061363f565b73ffffffffffffffffffffffffffffffffffffffff8116612917576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd9061343b565b61292081612e48565b50565b600360209081526000928352604080842090915290825290205481565b600760209081526000928352604080842090915290825290205481565b6000806008848154811061299a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083206040805160a08101825260059485029092018054835260018082015484860152600282015484840152600382015473ffffffffffffffffffffffffffffffffffffffff908116606086015260049283015460808601528b8852958552828720958a16808852958552828720548b88529185528287209587529484528186208187528452818620825180840190935280548084529501549382019390935290945090929091439190612a56908390612bc9565b90506000612a6d86604001518386602001516124cd565b60008a815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8d16808552908352818420548e855260038452828520918552925290912054919250612ac991612ac39084612b80565b90612bc9565b96505050505050505b92915050565b600082612ae757506000612ad2565b6000612af38385613825565b905082612b0085836137ec565b14612b37576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd906135e2565b9392505050565b6000612b3783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061304c565b600080612b8d83856137d4565b905083811015612b37576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd9061353d565b6000612b3783836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f770081525061309d565b600060088481548110612c47577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083208784526005808352604080862073ffffffffffffffffffffffffffffffffffffffff8916808852908552818720548b885260048652828820918852908552818720818852855295819020949091029091016002810154825180840190935284548352600185015493830193909352945043939291612cd3918991908689612dab565b6001810154600090612ce59088612b80565b600089815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff8b168452909152902054909150612d23906001612b80565b600089815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff8b16808552908352818420859055815180830183528981528084018781528e8652600485528386209286529184528285209585529490925290912091518255516001909101558454612d9b9088612b80565b90945550505050505050565b3390565b8251600090612dbb908490612bc9565b90506000612dce868387602001516124cd565b600088815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff88168452909152902054909150612e0b9082612b80565b6000978852600360209081526040808a2073ffffffffffffffffffffffffffffffffffffffff9096168a5294905292909620919091555050505050565b6009805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000612ecb838361295d565b600084815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152902054909150612f089082612b80565b600084815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8088168552925280832093909355905491517fa9059cbb00000000000000000000000000000000000000000000000000000000815291169063a9059cbb90612f7c9085908590600401613336565b602060405180830381600087803b158015612f9657600080fd5b505af1158015612faa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fce9190613194565b613004576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd906136e2565b604051819073ffffffffffffffffffffffffffffffffffffffff8416907f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d490600090a3505050565b60008183613087576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd919061335c565b50600061309484866137ec565b95945050505050565b600081848411156130db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cd919061335c565b5060006130948486613862565b6040518060a00160405280600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b803573ffffffffffffffffffffffffffffffffffffffff81168114611bb857600080fd5b600060208284031215613162578081fd5b612b378261312d565b6000806040838503121561317d578081fd5b6131868361312d565b946020939093013593505050565b6000602082840312156131a5578081fd5b81518015158114612b37578182fd5b6000602082840312156131c5578081fd5b5035919050565b600080604083850312156131de578182fd5b823591506131ee6020840161312d565b90509250929050565b60008060006060848603121561320b578081fd5b8335925061321b6020850161312d565b9150604084013590509250925092565b6000806040838503121561323d578182fd5b50508035926020909101359150565b60008060008060808587031215613261578081fd5b84359350602085013592506132786040860161312d565b9396929550929360600135925050565b60008060006060848603121561329c578283fd5b505081359360208301359350604090920135919050565b600080600080608085870312156132c8578384fd5b5050823594602084013594506040840135936060013592509050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6000602080835283518082850152825b818110156133885785810183015185820160400152820161336c565b818111156133995783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60208082526011908201527f47657420726577617264206661696c6564000000000000000000000000000000604082015260600190565b6020808252600c908201527f5374616b65206661696c65640000000000000000000000000000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600f908201527f5769746864726177206661696c65640000000000000000000000000000000000604082015260600190565b6020808252600e908201527f506f6f6c206e6f742076616c6964000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f496e76616c696420616d6f756e74000000000000000000000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526016908201527f4175746f436f6d706f756e64696e67206661696c656400000000000000000000604082015260600190565b60208082526010908201527f546f6f20736d616c6c20616d6f756e7400000000000000000000000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201527f706964206e6f742076616c696400000000000000000000000000000000000000604082015260600190565b60208082526010908201527f4e6f742076616c696420616d6f756e7400000000000000000000000000000000604082015260600190565b6020808252600c908201527f436c61696d206661696c65640000000000000000000000000000000000000000604082015260600190565b600060a08201905082518252602083015160208301526040830151604083015273ffffffffffffffffffffffffffffffffffffffff60608401511660608301526080830151608083015292915050565b90815260200190565b918252602082015260400190565b9485526020850193909352604084019190915273ffffffffffffffffffffffffffffffffffffffff166060830152608082015260a00190565b93845260208401929092526040830152606082015260800190565b600082198211156137e7576137e76138e7565b500190565b600082613820577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561385d5761385d6138e7565b500290565b600082821015613874576138746138e7565b500390565b600081613888576138886138e7565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156138e0576138e06138e7565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea26469706673582212209d47b82677c139b025d0a3e0974567a0ef7824642d13acd210315b721e96030e64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "amount": "The amount to withdraw"
        }
      }
    },
    "title": "Staking Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimReward(uint256)": {
        "notice": "Claims reward"
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraws the provided amount of staked"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2711,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rewardAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2713,
        "contract": "contracts/Staking.sol:Staking",
        "label": "autoCompoundingFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2719,
        "contract": "contracts/Staking.sol:Staking",
        "label": "claimedByUser",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2725,
        "contract": "contracts/Staking.sol:Staking",
        "label": "totalClaimForLatestStakeBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2734,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakedMap",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)2698_storage)))"
      },
      {
        "astId": 2740,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakedMapIndex",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2745,
        "contract": "contracts/Staking.sol:Staking",
        "label": "listUserInPool",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 2751,
        "contract": "contracts/Staking.sol:Staking",
        "label": "hasUserInPool",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2755,
        "contract": "contracts/Staking.sol:Staking",
        "label": "linearPoolInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(LinearPoolInfo)2709_storage)dyn_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_owner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(LinearPoolInfo)2709_storage)dyn_storage": {
        "base": "t_struct(LinearPoolInfo)2709_storage",
        "encoding": "dynamic_array",
        "label": "struct StakingStorage.LinearPoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)2698_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct StakingStorage.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Checkpoint)2698_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)2698_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(uint256 => struct StakingStorage.Checkpoint)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)2698_storage))"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Checkpoint)2698_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StakingStorage.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)2698_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Checkpoint)2698_storage": {
        "encoding": "inplace",
        "label": "struct StakingStorage.Checkpoint",
        "members": [
          {
            "astId": 2695,
            "contract": "contracts/Staking.sol:Staking",
            "label": "blockNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2697,
            "contract": "contracts/Staking.sol:Staking",
            "label": "stakedAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LinearPoolInfo)2709_storage": {
        "encoding": "inplace",
        "label": "struct StakingStorage.LinearPoolInfo",
        "members": [
          {
            "astId": 2700,
            "contract": "contracts/Staking.sol:Staking",
            "label": "totalStaked",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2702,
            "contract": "contracts/Staking.sol:Staking",
            "label": "minimumStakeAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2704,
            "contract": "contracts/Staking.sol:Staking",
            "label": "rewardPerBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2706,
            "contract": "contracts/Staking.sol:Staking",
            "label": "tokenStake",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2708,
            "contract": "contracts/Staking.sol:Staking",
            "label": "minimumWithdraw",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}